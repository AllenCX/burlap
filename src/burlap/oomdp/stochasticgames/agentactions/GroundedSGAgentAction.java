package burlap.oomdp.stochasticgames.agentactions;

import burlap.oomdp.core.AbstractGroundedAction;


/**
 * A {@link burlap.oomdp.stochasticgames.agentactions.GroundedSGAgentAction} is a high-level implementation
 * of the {@link burlap.oomdp.core.AbstractGroundedAction} that is closely associated with the {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction}
 * definition of actions that can be taken by agents in a multi-agent stochastic game. The role of a {@link burlap.oomdp.stochasticgames.agentactions.GroundedSGAgentAction}
 * is to provide a reference to a corresponding {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction}, a reference
 * to the name of the agent who is taking the action, and any other parameter assignment information that is necessary
 * for the agent to apply the action. The set of possible {@link burlap.oomdp.stochasticgames.agentactions.GroundedSGAgentAction} instances
 * specifying the set of possible parameter assignments an acting action can apply will be generated by the associated
 * {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction} method
 * {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction#getAllApplicableGroundedActions(burlap.oomdp.core.states.State, String)}.
 * See the {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction} class documentation for more information on
 * defining parameterized {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction}s.
 * <br/><br/>
 * This high-level class can be used directly, without subclassing, for any parameter-less {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction}
 * definitions
 * and should be subclassed for any parameterized {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction} definitions (with the
 * subclass instances returned by the associated {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction#getAllApplicableGroundedActions(burlap.oomdp.core.states.State, String)}
 * and {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction#getAssociatedGroundedAction(String)} method).
 * The {@link burlap.oomdp.stochasticgames.agentactions.GroundedSGAgentAction} subclass can store the
 * parameter assignment data any way you like.
 * <br/><br/>
 * If you plan on
 * making an {@link burlap.oomdp.stochasticgames.agentactions.SGAgentAction} definition with OO-MDP object parameters, you can use the existing
 * {@link burlap.oomdp.stochasticgames.agentactions.ObParamSGAgentAction}, which is associated with the {@link burlap.oomdp.singleagent.GroundedAction}
 * subclass {@link burlap.oomdp.stochasticgames.agentactions.ObParamSGAgentAction.GroundedObParamSGAgentAction}.
 * <br/><br/>
 * When you subclass a {@link burlap.oomdp.stochasticgames.agentactions.GroundedSGAgentAction} to provide parameter information
 * you should override the following methods.<br/>
 * {@link #isParameterized()}<br/>
 * {@link #copy()}<br/>
 * {@link #initParamsWithStringRep(String[])}<br/>
 * {@link #getParametersAsString()}<br/>
 * The {@link #isParameterized()} method should be overridden to return true if your subclass is parameterized. The
 * {@link #copy()} method should be override to return a new instance of your subclass with all parameter assignment information
 * copied over. The {@link #initParamsWithStringRep(String[])} should be overridden to allow a String array specification
 * of parameters to be provided to initialize them. Overriding this method is not critical, but is useful for serialization purposes.
 * The {@link #getParametersAsString()} similarly should returns a String array representing the String value of each parameter.
 * As with the {@link #initParamsWithStringRep(String[])} method, overriding {@link #getParametersAsString()} is not critical,
 * but is useful for serialization and similar processes.
 *
 * @author James MacGlashan
 *
 */
public class GroundedSGAgentAction implements AbstractGroundedAction {

	/**
	 * The name of the agent performing the action
	 */
	public String actingAgent;
	
	/**
	 * The single action the acting agent will be performing
	 */
	public SGAgentAction action;



	/**
	 * Initializes this object with the name of the acting agent, the SingleAction reference, and the parameters used.
	 * @param actingAgent the acting agent.
	 * @param a the {@link SGAgentAction}.
	 */
	public GroundedSGAgentAction(String actingAgent, SGAgentAction a){
		this.actingAgent = actingAgent;
		this.action = a;
	}




	/**
	 * Returns a string specifying the action name and parameters used in this GroundedSingleAction.
	 * @return a string specifying the action name and parameters used in this GroundedSingleAction.
	 */
	public String justActionString(){
		return this.actionName();
		
	}
	
	@Override
	public String toString(){
		StringBuffer buf = new StringBuffer();
		buf.append(actingAgent).append(":");
		buf.append(action.actionName);

		return buf.toString();
	}
	
	
	@Override
	public boolean equals(Object other){
		
		if(this == other){
			return true;
		}
		
		if(!(other instanceof GroundedSGAgentAction)){
			return false;
		}
		
		GroundedSGAgentAction go = (GroundedSGAgentAction)other;
		
		if(!this.actingAgent.equals(go.actingAgent)){
			return false;
		}
		
		if(!this.action.actionName.equals(go.action.actionName)){
			return false;
		}
		
		return true;
	}
	
	@Override
	public int hashCode(){
		String shortName = this.actingAgent + "::" + this.actionName();
		return shortName.hashCode();
	}


	@Override
	public String actionName() {
		return this.action.actionName;
	}


	@Override
	public AbstractGroundedAction copy() {
		return new GroundedSGAgentAction(this.actingAgent, this.action);
	}


	@Override
	public boolean isParameterized() {
		return this.action.isParameterized();
	}

	@Override
	public void initParamsWithStringRep(String[] params) {
		//nothing to do
	}

	@Override
	public String[] getParametersAsString() {
		return new String[0];
	}
}
